
AVRASM ver. 2.1.30  C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm Sun Dec 23 15:01:53 2018

C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1088): warning: Register r4 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1089): warning: Register r5 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1090): warning: Register r6 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1091): warning: Register r7 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1092): warning: Register r8 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1093): warning: Register r9 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1094): warning: Register r10 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1095): warning: Register r11 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1096): warning: Register r12 already defined by the .DEF directive
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1097): warning: Register r13 already defined by the .DEF directive
                 
                 
                 ;CodeVisionAVR C Compiler V3.12 Advanced
                 ;(C) Copyright 1998-2014 Pavel Haiduc, HP InfoTech s.r.l.
                 ;http://www.hpinfotech.com
                 
                 ;Build configuration    : Debug
                 ;Chip type              : ATmega32
                 ;Program type           : Application
                 ;Clock frequency        : 1.000000 MHz
                 ;Memory model           : Small
                 ;Optimize for           : Size
                 ;(s)printf features     : int, width
                 ;(s)scanf features      : int, width
                 ;External RAM size      : 0
                 ;Data Stack size        : 512 byte(s)
                 ;Heap size              : 0 byte(s)
                 ;Promote 'char' to 'int': Yes
                 ;'char' is unsigned     : Yes
                 ;8 bit enums            : Yes
                 ;Global 'const' stored in FLASH: Yes
                 ;Enhanced function parameter passing: Yes
                 ;Enhanced core instructions: On
                 ;Automatic register allocation for global variables: On
                 ;Smart register allocation: On
                 
                 	#define _MODEL_SMALL_
                 
                 	#pragma AVRPART ADMIN PART_NAME ATmega32
                 	#pragma AVRPART MEMORY PROG_FLASH 32768
                 	#pragma AVRPART MEMORY EEPROM 1024
                 	#pragma AVRPART MEMORY INT_SRAM SIZE 2048
                 	#pragma AVRPART MEMORY INT_SRAM START_ADDR 0x60
                 
                 	#define CALL_SUPPORTED 1
                 
                 	.LISTMAC
                 	.EQU UDRE=0x5
                 	.EQU RXC=0x7
                 	.EQU USR=0xB
                 	.EQU UDR=0xC
                 	.EQU SPSR=0xE
                 	.EQU SPDR=0xF
                 	.EQU EERE=0x0
                 	.EQU EEWE=0x1
                 	.EQU EEMWE=0x2
                 	.EQU EECR=0x1C
                 	.EQU EEDR=0x1D
                 	.EQU EEARL=0x1E
                 	.EQU EEARH=0x1F
                 	.EQU WDTCR=0x21
                 	.EQU MCUCR=0x35
                 	.EQU GICR=0x3B
                 	.EQU SPL=0x3D
                 	.EQU SPH=0x3E
                 	.EQU SREG=0x3F
                 
                 	.DEF R0X0=R0
                 	.DEF R0X1=R1
                 	.DEF R0X2=R2
                 	.DEF R0X3=R3
                 	.DEF R0X4=R4
                 	.DEF R0X5=R5
                 	.DEF R0X6=R6
                 	.DEF R0X7=R7
                 	.DEF R0X8=R8
                 	.DEF R0X9=R9
                 	.DEF R0XA=R10
                 	.DEF R0XB=R11
                 	.DEF R0XC=R12
                 	.DEF R0XD=R13
                 	.DEF R0XE=R14
                 	.DEF R0XF=R15
                 	.DEF R0X10=R16
                 	.DEF R0X11=R17
                 	.DEF R0X12=R18
                 	.DEF R0X13=R19
                 	.DEF R0X14=R20
                 	.DEF R0X15=R21
                 	.DEF R0X16=R22
                 	.DEF R0X17=R23
                 	.DEF R0X18=R24
                 	.DEF R0X19=R25
                 	.DEF R0X1A=R26
                 	.DEF R0X1B=R27
                 	.DEF R0X1C=R28
                 	.DEF R0X1D=R29
                 	.DEF R0X1E=R30
                 	.DEF R0X1F=R31
                 
                 	.EQU __SRAM_START=0x0060
                 	.EQU __SRAM_END=0x085F
                 	.EQU __DSTACK_SIZE=0x0200
                 	.EQU __HEAP_SIZE=0x0000
                 	.EQU __CLEAR_SRAM_SIZE=__SRAM_END-__SRAM_START+1
                 
                 	.MACRO __CPD1N
                 	CPI  R30,LOW(@0)
                 	LDI  R26,HIGH(@0)
                 	CPC  R31,R26
                 	LDI  R26,BYTE3(@0)
                 	CPC  R22,R26
                 	LDI  R26,BYTE4(@0)
                 	CPC  R23,R26
                 	.ENDM
                 
                 	.MACRO __CPD2N
                 	CPI  R26,LOW(@0)
                 	LDI  R30,HIGH(@0)
                 	CPC  R27,R30
                 	LDI  R30,BYTE3(@0)
                 	CPC  R24,R30
                 	LDI  R30,BYTE4(@0)
                 	CPC  R25,R30
                 	.ENDM
                 
                 	.MACRO __CPWRR
                 	CP   R@0,R@2
                 	CPC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __CPWRN
                 	CPI  R@0,LOW(@2)
                 	LDI  R30,HIGH(@2)
                 	CPC  R@1,R30
                 	.ENDM
                 
                 	.MACRO __ADDB1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDB2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1MN
                 	SUBI R30,LOW(-@0-(@1))
                 	SBCI R31,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW2MN
                 	SUBI R26,LOW(-@0-(@1))
                 	SBCI R27,HIGH(-@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDW1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1FN
                 	SUBI R30,LOW(-2*@0-(@1))
                 	SBCI R31,HIGH(-2*@0-(@1))
                 	SBCI R22,BYTE3(-2*@0-(@1))
                 	.ENDM
                 
                 	.MACRO __ADDD1N
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	SBCI R22,BYTE3(-@0)
                 	SBCI R23,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __ADDD2N
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	SBCI R24,BYTE3(-@0)
                 	SBCI R25,BYTE4(-@0)
                 	.ENDM
                 
                 	.MACRO __SUBD1N
                 	SUBI R30,LOW(@0)
                 	SBCI R31,HIGH(@0)
                 	SBCI R22,BYTE3(@0)
                 	SBCI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __SUBD2N
                 	SUBI R26,LOW(@0)
                 	SBCI R27,HIGH(@0)
                 	SBCI R24,BYTE3(@0)
                 	SBCI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDBMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ANDWMNN
                 	LDS  R30,@0+(@1)
                 	ANDI R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ANDI R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ANDD1N
                 	ANDI R30,LOW(@0)
                 	ANDI R31,HIGH(@0)
                 	ANDI R22,BYTE3(@0)
                 	ANDI R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ANDD2N
                 	ANDI R26,LOW(@0)
                 	ANDI R27,HIGH(@0)
                 	ANDI R24,BYTE3(@0)
                 	ANDI R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORBMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __ORWMNN
                 	LDS  R30,@0+(@1)
                 	ORI  R30,LOW(@2)
                 	STS  @0+(@1),R30
                 	LDS  R30,@0+(@1)+1
                 	ORI  R30,HIGH(@2)
                 	STS  @0+(@1)+1,R30
                 	.ENDM
                 
                 	.MACRO __ORD1N
                 	ORI  R30,LOW(@0)
                 	ORI  R31,HIGH(@0)
                 	ORI  R22,BYTE3(@0)
                 	ORI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __ORD2N
                 	ORI  R26,LOW(@0)
                 	ORI  R27,HIGH(@0)
                 	ORI  R24,BYTE3(@0)
                 	ORI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __DELAY_USB
                 	LDI  R24,LOW(@0)
                 __DELAY_USB_LOOP:
                 	DEC  R24
                 	BRNE __DELAY_USB_LOOP
                 	.ENDM
                 
                 	.MACRO __DELAY_USW
                 	LDI  R24,LOW(@0)
                 	LDI  R25,HIGH(@0)
                 __DELAY_USW_LOOP:
                 	SBIW R24,1
                 	BRNE __DELAY_USW_LOOP
                 	.ENDM
                 
                 	.MACRO __GETD1S
                 	LDD  R30,Y+@0
                 	LDD  R31,Y+@0+1
                 	LDD  R22,Y+@0+2
                 	LDD  R23,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __GETD2S
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	LDD  R24,Y+@0+2
                 	LDD  R25,Y+@0+3
                 	.ENDM
                 
                 	.MACRO __PUTD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R31
                 	STD  Y+@0+2,R22
                 	STD  Y+@0+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTD2S
                 	STD  Y+@0,R26
                 	STD  Y+@0+1,R27
                 	STD  Y+@0+2,R24
                 	STD  Y+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __PUTDZ2
                 	STD  Z+@0,R26
                 	STD  Z+@0+1,R27
                 	STD  Z+@0+2,R24
                 	STD  Z+@0+3,R25
                 	.ENDM
                 
                 	.MACRO __CLRD1S
                 	STD  Y+@0,R30
                 	STD  Y+@0+1,R30
                 	STD  Y+@0+2,R30
                 	STD  Y+@0+3,R30
                 	.ENDM
                 
                 	.MACRO __POINTB1MN
                 	LDI  R30,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW1MN
                 	LDI  R30,LOW(@0+(@1))
                 	LDI  R31,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1M
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __POINTW1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	LDI  R22,BYTE3(2*@0+(@1))
                 	LDI  R23,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTB2MN
                 	LDI  R26,LOW(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2MN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTW2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTD2FN
                 	LDI  R26,LOW(2*@0+(@1))
                 	LDI  R27,HIGH(2*@0+(@1))
                 	LDI  R24,BYTE3(2*@0+(@1))
                 	LDI  R25,BYTE4(2*@0+(@1))
                 	.ENDM
                 
                 	.MACRO __POINTBRM
                 	LDI  R@0,LOW(@1)
                 	.ENDM
                 
                 	.MACRO __POINTWRM
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __POINTBRMN
                 	LDI  R@0,LOW(@1+(@2))
                 	.ENDM
                 
                 	.MACRO __POINTWRMN
                 	LDI  R@0,LOW(@2+(@3))
                 	LDI  R@1,HIGH(@2+(@3))
                 	.ENDM
                 
                 	.MACRO __POINTWRFN
                 	LDI  R@0,LOW(@2*2+(@3))
                 	LDI  R@1,HIGH(@2*2+(@3))
                 	.ENDM
                 
                 	.MACRO __GETD1N
                 	LDI  R30,LOW(@0)
                 	LDI  R31,HIGH(@0)
                 	LDI  R22,BYTE3(@0)
                 	LDI  R23,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETD2N
                 	LDI  R26,LOW(@0)
                 	LDI  R27,HIGH(@0)
                 	LDI  R24,BYTE3(@0)
                 	LDI  R25,BYTE4(@0)
                 	.ENDM
                 
                 	.MACRO __GETB1MN
                 	LDS  R30,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETB1HMN
                 	LDS  R31,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	LDS  R22,@0+(@1)+2
                 	LDS  R23,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __GETBRMN
                 	LDS  R@0,@1+(@2)
                 	.ENDM
                 
                 	.MACRO __GETWRMN
                 	LDS  R@0,@2+(@3)
                 	LDS  R@1,@2+(@3)+1
                 	.ENDM
                 
                 	.MACRO __GETWRZ
                 	LDD  R@0,Z+@2
                 	LDD  R@1,Z+@2+1
                 	.ENDM
                 
                 	.MACRO __GETD2Z
                 	LDD  R26,Z+@0
                 	LDD  R27,Z+@0+1
                 	LDD  R24,Z+@0+2
                 	LDD  R25,Z+@0+3
                 	.ENDM
                 
                 	.MACRO __GETB2MN
                 	LDS  R26,@0+(@1)
                 	.ENDM
                 
                 	.MACRO __GETW2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	.ENDM
                 
                 	.MACRO __GETD2MN
                 	LDS  R26,@0+(@1)
                 	LDS  R27,@0+(@1)+1
                 	LDS  R24,@0+(@1)+2
                 	LDS  R25,@0+(@1)+3
                 	.ENDM
                 
                 	.MACRO __PUTB1MN
                 	STS  @0+(@1),R30
                 	.ENDM
                 
                 	.MACRO __PUTW1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1MN
                 	STS  @0+(@1),R30
                 	STS  @0+(@1)+1,R31
                 	STS  @0+(@1)+2,R22
                 	STS  @0+(@1)+3,R23
                 	.ENDM
                 
                 	.MACRO __PUTB1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRB
                 	.ENDM
                 
                 	.MACRO __PUTW1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRW
                 	.ENDM
                 
                 	.MACRO __PUTD1EN
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMWRD
                 	.ENDM
                 
                 	.MACRO __PUTBR0MN
                 	STS  @0+(@1),R0
                 	.ENDM
                 
                 	.MACRO __PUTBMRN
                 	STS  @0+(@1),R@2
                 	.ENDM
                 
                 	.MACRO __PUTWMRN
                 	STS  @0+(@1),R@2
                 	STS  @0+(@1)+1,R@3
                 	.ENDM
                 
                 	.MACRO __PUTBZR
                 	STD  Z+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWZR
                 	STD  Z+@2,R@0
                 	STD  Z+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __GETW1R
                 	MOV  R30,R@0
                 	MOV  R31,R@1
                 	.ENDM
                 
                 	.MACRO __GETW2R
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	.ENDM
                 
                 	.MACRO __GETWRN
                 	LDI  R@0,LOW(@2)
                 	LDI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __PUTW1R
                 	MOV  R@0,R30
                 	MOV  R@1,R31
                 	.ENDM
                 
                 	.MACRO __PUTW2R
                 	MOV  R@0,R26
                 	MOV  R@1,R27
                 	.ENDM
                 
                 	.MACRO __ADDWRN
                 	SUBI R@0,LOW(-@2)
                 	SBCI R@1,HIGH(-@2)
                 	.ENDM
                 
                 	.MACRO __ADDWRR
                 	ADD  R@0,R@2
                 	ADC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __SUBWRN
                 	SUBI R@0,LOW(@2)
                 	SBCI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __SUBWRR
                 	SUB  R@0,R@2
                 	SBC  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ANDWRN
                 	ANDI R@0,LOW(@2)
                 	ANDI R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ANDWRR
                 	AND  R@0,R@2
                 	AND  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __ORWRN
                 	ORI  R@0,LOW(@2)
                 	ORI  R@1,HIGH(@2)
                 	.ENDM
                 
                 	.MACRO __ORWRR
                 	OR   R@0,R@2
                 	OR   R@1,R@3
                 	.ENDM
                 
                 	.MACRO __EORWRR
                 	EOR  R@0,R@2
                 	EOR  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __GETWRS
                 	LDD  R@0,Y+@2
                 	LDD  R@1,Y+@2+1
                 	.ENDM
                 
                 	.MACRO __PUTBSR
                 	STD  Y+@1,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSR
                 	STD  Y+@2,R@0
                 	STD  Y+@2+1,R@1
                 	.ENDM
                 
                 	.MACRO __MOVEWRR
                 	MOV  R@0,R@2
                 	MOV  R@1,R@3
                 	.ENDM
                 
                 	.MACRO __INWR
                 	IN   R@0,@2
                 	IN   R@1,@2+1
                 	.ENDM
                 
                 	.MACRO __OUTWR
                 	OUT  @2+1,R@1
                 	OUT  @2,R@0
                 	.ENDM
                 
                 	.MACRO __CALL1MN
                 	LDS  R30,@0+(@1)
                 	LDS  R31,@0+(@1)+1
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL1FN
                 	LDI  R30,LOW(2*@0+(@1))
                 	LDI  R31,HIGH(2*@0+(@1))
                 	CALL __GETW1PF
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EN
                 	PUSH R26
                 	PUSH R27
                 	LDI  R26,LOW(@0+(@1))
                 	LDI  R27,HIGH(@0+(@1))
                 	CALL __EEPROMRDW
                 	POP  R27
                 	POP  R26
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __CALL2EX
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	CALL __EEPROMRDD
                 	ICALL
                 	.ENDM
                 
                 	.MACRO __GETW1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1STACK
                 	IN   R30,SPL
                 	IN   R31,SPH
                 	ADIW R30,@0+1
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __NBST
                 	BST  R@0,@1
                 	IN   R30,SREG
                 	LDI  R31,0x40
                 	EOR  R30,R31
                 	OUT  SREG,R30
                 	.ENDM
                 
                 
                 	.MACRO __PUTB1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SN
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNS
                 	LDD  R26,Y+@0
                 	LDD  R27,Y+@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMN
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1PMNS
                 	LDS  R26,@0
                 	LDS  R27,@0+1
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RN
                 	MOVW R26,R@0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RNS
                 	MOVW R26,R@0
                 	ADIW R26,@1
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RON
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	CALL __PUTDP1
                 	.ENDM
                 
                 	.MACRO __PUTB1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1RONS
                 	MOV  R26,R@0
                 	MOV  R27,R@1
                 	ADIW R26,@2
                 	CALL __PUTDP1
                 	.ENDM
                 
                 
                 	.MACRO __GETB1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R30,Z
                 	.ENDM
                 
                 	.MACRO __GETB1HSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	.ENDM
                 
                 	.MACRO __GETW1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R31,Z
                 	MOV  R30,R0
                 	.ENDM
                 
                 	.MACRO __GETD1SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R0,Z+
                 	LD   R1,Z+
                 	LD   R22,Z+
                 	LD   R23,Z
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __GETB2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R26,X
                 	.ENDM
                 
                 	.MACRO __GETW2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	.ENDM
                 
                 	.MACRO __GETD2SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R1,X+
                 	LD   R24,X+
                 	LD   R25,X
                 	MOVW R26,R0
                 	.ENDM
                 
                 	.MACRO __GETBRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	LD   R@0,Z
                 	.ENDM
                 
                 	.MACRO __GETWRSX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	LD   R@0,Z+
                 	LD   R@1,Z
                 	.ENDM
                 
                 	.MACRO __GETBRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	LD   R@0,X
                 	.ENDM
                 
                 	.MACRO __GETWRSX2
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@2)
                 	SBCI R27,HIGH(-@2)
                 	LD   R@0,X+
                 	LD   R@1,X
                 	.ENDM
                 
                 	.MACRO __LSLW8SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	LD   R31,Z
                 	CLR  R30
                 	.ENDM
                 
                 	.MACRO __PUTB1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __CLRW1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __CLRD1SX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X+,R30
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTB2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z,R26
                 	.ENDM
                 
                 	.MACRO __PUTW2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z,R27
                 	.ENDM
                 
                 	.MACRO __PUTD2SX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@0)
                 	SBCI R31,HIGH(-@0)
                 	ST   Z+,R26
                 	ST   Z+,R27
                 	ST   Z+,R24
                 	ST   Z,R25
                 	.ENDM
                 
                 	.MACRO __PUTBSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@1)
                 	SBCI R31,HIGH(-@1)
                 	ST   Z,R@0
                 	.ENDM
                 
                 	.MACRO __PUTWSRX
                 	MOVW R30,R28
                 	SUBI R30,LOW(-@2)
                 	SBCI R31,HIGH(-@2)
                 	ST   Z+,R@0
                 	ST   Z,R@1
                 	.ENDM
                 
                 	.MACRO __PUTB1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X,R30
                 	.ENDM
                 
                 	.MACRO __PUTW1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X,R31
                 	.ENDM
                 
                 	.MACRO __PUTD1SNX
                 	MOVW R26,R28
                 	SUBI R26,LOW(-@0)
                 	SBCI R27,HIGH(-@0)
                 	LD   R0,X+
                 	LD   R27,X
                 	MOV  R26,R0
                 	SUBI R26,LOW(-@1)
                 	SBCI R27,HIGH(-@1)
                 	ST   X+,R30
                 	ST   X+,R31
                 	ST   X+,R22
                 	ST   X,R23
                 	.ENDM
                 
                 	.MACRO __MULBRR
                 	MULS R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRRU
                 	MUL  R@0,R@1
                 	MOVW R30,R0
                 	.ENDM
                 
                 	.MACRO __MULBRR0
                 	MULS R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBRRU0
                 	MUL  R@0,R@1
                 	.ENDM
                 
                 	.MACRO __MULBNWRU
                 	LDI  R26,@2
                 	MUL  R26,R@0
                 	MOVW R30,R0
                 	MUL  R26,R@1
                 	ADD  R31,R0
                 	.ENDM
                 
                 ;NAME DEFINITIONS FOR GLOBAL VARIABLES ALLOCATED TO REGISTERS
                 	.DEF _position=R4
                 	.DEF _position_msb=R5
                 	.DEF _pass1=R6
                 	.DEF _pass1_msb=R7
                 	.DEF _pass2=R8
                 	.DEF _pass2_msb=R9
                 	.DEF _pass3=R10
                 	.DEF _pass3_msb=R11
                 	.DEF _pass4=R12
                 	.DEF _pass4_msb=R13
                 
                 	.CSEG
                 	.ORG 0x00
                 
                 ;START OF CODE MARKER
                 __START_OF_CODE:
                 
                 ;INTERRUPT VECTORS
000000 940c 0077 	JMP  __RESET
000002 940c 0000 	JMP  0x00
000004 940c 0000 	JMP  0x00
000006 940c 00a4 	JMP  _ext_int2_isr
000008 940c 0000 	JMP  0x00
00000a 940c 0000 	JMP  0x00
00000c 940c 0000 	JMP  0x00
00000e 940c 0000 	JMP  0x00
000010 940c 0000 	JMP  0x00
000012 940c 0000 	JMP  0x00
000014 940c 0000 	JMP  0x00
000016 940c 0000 	JMP  0x00
000018 940c 0000 	JMP  0x00
00001a 940c 0000 	JMP  0x00
00001c 940c 0000 	JMP  0x00
00001e 940c 0000 	JMP  0x00
000020 940c 0000 	JMP  0x00
000022 940c 0000 	JMP  0x00
000024 940c 0000 	JMP  0x00
000026 940c 0000 	JMP  0x00
000028 940c 0000 	JMP  0x00
                 
                 _key_refresh:
00002a fdfe
00002b f7fb      	.DB  0xFE,0xFD,0xFB,0xF7
                 _key_number:
00002c 3837
00002d 2f39
00002e 3534
00002f 2a36      	.DB  0x37,0x38,0x39,0x2F,0x34,0x35,0x36,0x2A
000030 3231
000031 2d33
000032 3043
000033 2b3d      	.DB  0x31,0x32,0x33,0x2D,0x43,0x30,0x3D,0x2B
                 
                 ;GLOBAL REGISTER VARIABLES INITIALIZATION
                 __REG_VARS:
000034 ffff
000035 ffff      	.DB  0xFF,0xFF,0xFF,0xFF
000036 ffff
000037 ffff      	.DB  0xFF,0xFF,0xFF,0xFF
000038 ffff      	.DB  0xFF,0xFF
                 
                 _0x0:
000039 6c50
00003a 6165
00003b 6573
00003c 6320      	.DB  0x50,0x6C,0x65,0x61,0x73,0x65,0x20,0x63
00003d 6f68
00003e 736f
00003f 2065
000040 2061      	.DB  0x68,0x6F,0x6F,0x73,0x65,0x20,0x61,0x20
000041 656e
000042 2077
000043 6170
000044 7373      	.DB  0x6E,0x65,0x77,0x20,0x70,0x61,0x73,0x73
000045 6f77
000046 6472
000047 5000
000048 7361      	.DB  0x77,0x6F,0x72,0x64,0x0,0x50,0x61,0x73
000049 7773
00004a 726f
00004b 2064
00004c 6553      	.DB  0x73,0x77,0x6F,0x72,0x64,0x20,0x53,0x65
00004d 6574
00004e 2064
00004f 7553
000050 6363      	.DB  0x74,0x65,0x64,0x20,0x53,0x75,0x63,0x63
000051 7365
000052 6673
000053 6c75
000054 796c      	.DB  0x65,0x73,0x73,0x66,0x75,0x6C,0x6C,0x79
000055 5000
000056 656c
000057 7361
000058 2065      	.DB  0x0,0x50,0x6C,0x65,0x61,0x73,0x65,0x20
000059 6e69
00005a 6573
00005b 7472
00005c 7920      	.DB  0x69,0x6E,0x73,0x65,0x72,0x74,0x20,0x79
00005d 756f
00005e 2072
00005f 6170
000060 7373      	.DB  0x6F,0x75,0x72,0x20,0x70,0x61,0x73,0x73
000061 6f77
000062 6472
000063 6f00
000064 006b      	.DB  0x77,0x6F,0x72,0x64,0x0,0x6F,0x6B,0x0
000065 6150
000066 7373
000067 6f77
000068 6472      	.DB  0x50,0x61,0x73,0x73,0x77,0x6F,0x72,0x64
000069 7720
00006a 6f72
00006b 676e
00006c 2120      	.DB  0x20,0x77,0x72,0x6F,0x6E,0x67,0x20,0x21
00006d 2121
C:\Users\Mersad\Downloads\Documents\Uni\AVR\Keypad_Int_ORG\Debug\List\KPadInt.asm(1154): warning: .cseg .db misalignment - padding zero byte
00006e 0000      	.DB  0x21,0x21,0x0
                 _0x2000003:
00006f c080      	.DB  0x80,0xC0
                 
                 __GLOBAL_INI_TBL:
000070 000a      	.DW  0x0A
000071 0004      	.DW  0x04
000072 0068      	.DW  __REG_VARS*2
                 
000073 0002      	.DW  0x02
000074 0260      	.DW  __base_y_G100
000075 00de      	.DW  _0x2000003*2
                 
                 _0xFFFFFFFF:
000076 0000      	.DW  0
                 
                 #define __GLOBAL_INI_TBL_PRESENT 1
                 
                 __RESET:
000077 94f8      	CLI
000078 27ee      	CLR  R30
000079 bbec      	OUT  EECR,R30
                 
                 ;INTERRUPT VECTORS ARE PLACED
                 ;AT THE START OF FLASH
00007a e0f1      	LDI  R31,1
00007b bffb      	OUT  GICR,R31
00007c bfeb      	OUT  GICR,R30
00007d bfe5      	OUT  MCUCR,R30
                 
                 ;CLEAR R2-R14
00007e e08d      	LDI  R24,(14-2)+1
00007f e0a2      	LDI  R26,2
000080 27bb      	CLR  R27
                 __CLEAR_REG:
000081 93ed      	ST   X+,R30
000082 958a      	DEC  R24
000083 f7e9      	BRNE __CLEAR_REG
                 
                 ;CLEAR SRAM
000084 e080      	LDI  R24,LOW(__CLEAR_SRAM_SIZE)
000085 e098      	LDI  R25,HIGH(__CLEAR_SRAM_SIZE)
000086 e6a0      	LDI  R26,__SRAM_START
                 __CLEAR_SRAM:
000087 93ed      	ST   X+,R30
000088 9701      	SBIW R24,1
000089 f7e9      	BRNE __CLEAR_SRAM
                 
                 ;GLOBAL VARIABLES INITIALIZATION
00008a eee0      	LDI  R30,LOW(__GLOBAL_INI_TBL*2)
00008b e0f0      	LDI  R31,HIGH(__GLOBAL_INI_TBL*2)
                 __GLOBAL_INI_NEXT:
00008c 9185      	LPM  R24,Z+
00008d 9195      	LPM  R25,Z+
00008e 9700      	SBIW R24,0
00008f f061      	BREQ __GLOBAL_INI_END
000090 91a5      	LPM  R26,Z+
000091 91b5      	LPM  R27,Z+
000092 9005      	LPM  R0,Z+
000093 9015      	LPM  R1,Z+
000094 01bf      	MOVW R22,R30
000095 01f0      	MOVW R30,R0
                 __GLOBAL_INI_LOOP:
000096 9005      	LPM  R0,Z+
000097 920d      	ST   X+,R0
000098 9701      	SBIW R24,1
000099 f7e1      	BRNE __GLOBAL_INI_LOOP
00009a 01fb      	MOVW R30,R22
00009b cff0      	RJMP __GLOBAL_INI_NEXT
                 __GLOBAL_INI_END:
                 
                 ;HARDWARE STACK POINTER INITIALIZATION
00009c e5ef      	LDI  R30,LOW(__SRAM_END-__HEAP_SIZE)
00009d bfed      	OUT  SPL,R30
00009e e0e8      	LDI  R30,HIGH(__SRAM_END-__HEAP_SIZE)
00009f bfee      	OUT  SPH,R30
                 
                 ;DATA STACK POINTER INITIALIZATION
0000a0 e6c0      	LDI  R28,LOW(__SRAM_START+__DSTACK_SIZE)
0000a1 e0d2      	LDI  R29,HIGH(__SRAM_START+__DSTACK_SIZE)
                 
0000a2 940c 01f3 	JMP  _main
                 
                 	.ESEG
                 	.ORG 0
                 
                 	.DSEG
                 	.ORG 0x260
                 
                 	.CSEG
                 ;
                 ;#include <mega32.h>
                 	#ifndef __SLEEP_DEFINED__
                 	#define __SLEEP_DEFINED__
                 	.EQU __se_bit=0x80
                 	.EQU __sm_mask=0x70
                 	.EQU __sm_powerdown=0x20
                 	.EQU __sm_powersave=0x30
                 	.EQU __sm_standby=0x60
                 	.EQU __sm_ext_standby=0x70
                 	.EQU __sm_adc_noise_red=0x10
                 	.SET power_ctrl_reg=mcucr
                 	#endif
                 ;#include <alcd.h>
                 ;#include <delay.h>
                 ;#include <sleep.h>
                 ;
                 ;// Declare your global variables here
                 ;flash char key_refresh[4]={0xFE, 0xFD, 0xFB, 0xF7};
                 ;//      flash int key_number [4][4]={'7', '8', '9', '-3',
                 ;//                                   '4', '5', '6', '-4',
                 ;//                                   '1', '2', '3', '-5',
                 ;//                                 '-1', '0', '-2', '-6'};
                 ;
                 ;flash char key_number [4][4]={'7', '8', '9', '/',
                 ;                              '4', '5', '6', '*',
                 ;                              '1', '2', '3', '-',
                 ;                              'C', '0', '=', '+'};
                 ;eeprom int password1 = -1 ;
                 ;eeprom int password2 = -1 ;
                 ;eeprom int password3 = -1 ;
                 ;eeprom int password4 = -1 ;
                 ;int position = -1 ;
                 ;eeprom int isPassword = -1 ;
                 ;
                 ;int pass1 = -1 ;
                 ;int pass2 = -1 ;
                 ;int pass3 = -1 ;
                 ;int pass4 = -1 ;
                 ;
                 ;
                 ;// External Interrupt 2 service routine
                 ;interrupt [EXT_INT2] void ext_int2_isr(void){
                 ; 0000 0020 interrupt [4] void ext_int2_isr(void){
                 
                 	.CSEG
                 _ext_int2_isr:
                 ; .FSTART _ext_int2_isr
0000a4 920a      	ST   -Y,R0
0000a5 921a      	ST   -Y,R1
0000a6 92fa      	ST   -Y,R15
0000a7 936a      	ST   -Y,R22
0000a8 937a      	ST   -Y,R23
0000a9 938a      	ST   -Y,R24
0000aa 939a      	ST   -Y,R25
0000ab 93aa      	ST   -Y,R26
0000ac 93ba      	ST   -Y,R27
0000ad 93ea      	ST   -Y,R30
0000ae 93fa      	ST   -Y,R31
0000af b7ef      	IN   R30,SREG
0000b0 93ea      	ST   -Y,R30
                 ; 0000 0021 
                 ; 0000 0022  char  row, column, temp;
                 ; 0000 0023 
                 ; 0000 0024        for (row=0; row<4; row++)
0000b1 940e 0369 	CALL __SAVELOCR4
                 ;	row -> R17
                 ;	column -> R16
                 ;	temp -> R19
0000b3 e010      	LDI  R17,LOW(0)
                 _0x4:
0000b4 3014      	CPI  R17,4
0000b5 f008      	BRLO PC+2
0000b6 c129      	RJMP _0x5
                 ; 0000 0025         {
                 ; 0000 0026              PORTD =  key_refresh[row];
0000b7 2fe1      	MOV  R30,R17
0000b8 e0f0      	LDI  R31,0
0000b9 5aec      	SUBI R30,LOW(-_key_refresh*2)
0000ba 4fff      	SBCI R31,HIGH(-_key_refresh*2)
0000bb 9004      	LPM  R0,Z
0000bc ba02      	OUT  0x12,R0
                 ; 0000 0027 
                 ; 0000 0028          temp = PIND;
0000bd b330      	IN   R19,16
                 ; 0000 0029          temp = temp & 0xF0;
0000be 7f30      	ANDI R19,LOW(240)
                 ; 0000 002A 
                 ; 0000 002B          if (temp != 0xF0)
0000bf 3f30      	CPI  R19,240
0000c0 f409      	BRNE PC+2
0000c1 c11c      	RJMP _0x6
                 ; 0000 002C          {
                 ; 0000 002D              if (PIND.4 == 0)
0000c2 9b84      	SBIS 0x10,4
                 ; 0000 002E                 column=0;
0000c3 e000      	LDI  R16,LOW(0)
                 ; 0000 002F              if (PIND.5 == 0)
0000c4 9b85      	SBIS 0x10,5
                 ; 0000 0030                 column=1;
0000c5 e001      	LDI  R16,LOW(1)
                 ; 0000 0031              if (PIND.6 == 0)
0000c6 9b86      	SBIS 0x10,6
                 ; 0000 0032                 column=2;
0000c7 e002      	LDI  R16,LOW(2)
                 ; 0000 0033              if (PIND.7 == 0)
0000c8 9b87      	SBIS 0x10,7
                 ; 0000 0034                 column=3;
0000c9 e003      	LDI  R16,LOW(3)
                 ; 0000 0035 
                 ; 0000 0036              if (key_number[row][column] == 'C') {
0000ca 940e 02b5 	CALL SUBOPT_0x0
0000cc 34a3      	CPI  R26,LOW(0x43)
0000cd f4c9      	BRNE _0xB
                 ; 0000 0037               lcd_clear();
0000ce 940e 023e 	CALL _lcd_clear
                 ; 0000 0038               isPassword = -1 ;
0000d0 e0a8      	LDI  R26,LOW(_isPassword)
0000d1 e0b0      	LDI  R27,HIGH(_isPassword)
0000d2 940e 02c3 	CALL SUBOPT_0x1
                 ; 0000 0039               password1 = -1 ;
0000d4 e0a0      	LDI  R26,LOW(_password1)
0000d5 e0b0      	LDI  R27,HIGH(_password1)
0000d6 940e 02c3 	CALL SUBOPT_0x1
                 ; 0000 003A               password2 = -1 ;
0000d8 e0a2      	LDI  R26,LOW(_password2)
0000d9 e0b0      	LDI  R27,HIGH(_password2)
0000da 940e 02c3 	CALL SUBOPT_0x1
                 ; 0000 003B               password3 = -1 ;
0000dc e0a4      	LDI  R26,LOW(_password3)
0000dd e0b0      	LDI  R27,HIGH(_password3)
0000de 940e 02c3 	CALL SUBOPT_0x1
                 ; 0000 003C               password4 = -1 ;
0000e0 e0a6      	LDI  R26,LOW(_password4)
0000e1 e0b0      	LDI  R27,HIGH(_password4)
0000e2 940e 02c3 	CALL SUBOPT_0x1
                 ; 0000 003D               lcd_putsf ("Please choose a new password");
                +
0000e4 e7a2     +LDI R26 , LOW ( 2 * _0x0 + ( 0 ) )
0000e5 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 0 ) )
                 	__POINTW2FN _0x0,0
0000e6 c0f3      	RJMP _0x44
                 ; 0000 003E               position = 1 ;
                 ; 0000 003F               }
                 ; 0000 0040 
                 ; 0000 0041               else
                 _0xB:
                 ; 0000 0042               {
                 ; 0000 0043                     if (isPassword == -1 && position == 1) {
0000e7 940e 02c8 	CALL SUBOPT_0x2
0000e9 f429      	BRNE _0xE
0000ea e0e1      	LDI  R30,LOW(1)
0000eb e0f0      	LDI  R31,HIGH(1)
0000ec 15e4      	CP   R30,R4
0000ed 05f5      	CPC  R31,R5
0000ee f009      	BREQ _0xF
                 _0xE:
0000ef c00d      	RJMP _0xD
                 _0xF:
                 ; 0000 0044                  lcd_clear();
0000f0 d14d      	RCALL _lcd_clear
                 ; 0000 0045                  lcd_putchar(key_number[row][column]);
0000f1 940e 02b5 	CALL SUBOPT_0x0
0000f3 940e 02d0 	CALL SUBOPT_0x3
                 ; 0000 0046                  password1 = key_number[row][column] ;
0000f5 e0a0      	LDI  R26,LOW(_password1)
0000f6 e0b0      	LDI  R27,HIGH(_password1)
0000f7 e0f0      	LDI  R31,0
0000f8 940e 0350 	CALL __EEPROMWRW
                 ; 0000 0047                  position = 2 ;
0000fa e0e2      	LDI  R30,LOW(2)
0000fb e0f0      	LDI  R31,HIGH(2)
0000fc c093      	RJMP _0x45
                 ; 0000 0048 
                 ; 0000 0049                       }
                 ; 0000 004A 
                 ; 0000 004B                  else if (isPassword == -1 && position == 2) {
                 _0xD:
0000fd 940e 02c8 	CALL SUBOPT_0x2
0000ff f429      	BRNE _0x12
000100 e0e2      	LDI  R30,LOW(2)
000101 e0f0      	LDI  R31,HIGH(2)
000102 15e4      	CP   R30,R4
000103 05f5      	CPC  R31,R5
000104 f009      	BREQ _0x13
                 _0x12:
000105 c00c      	RJMP _0x11
                 _0x13:
                 ; 0000 004C                  lcd_putchar(key_number[row][column]);
000106 940e 02b5 	CALL SUBOPT_0x0
000108 940e 02d0 	CALL SUBOPT_0x3
                 ; 0000 004D                  password2 = key_number[row][column] ;
00010a e0a2      	LDI  R26,LOW(_password2)
00010b e0b0      	LDI  R27,HIGH(_password2)
00010c e0f0      	LDI  R31,0
00010d 940e 0350 	CALL __EEPROMWRW
                 ; 0000 004E                  position = 3 ;
00010f e0e3      	LDI  R30,LOW(3)
000110 e0f0      	LDI  R31,HIGH(3)
000111 c07e      	RJMP _0x45
                 ; 0000 004F              }else if (isPassword == -1 && position == 3) {
                 _0x11:
000112 940e 02c8 	CALL SUBOPT_0x2
000114 f429      	BRNE _0x16
000115 e0e3      	LDI  R30,LOW(3)
000116 e0f0      	LDI  R31,HIGH(3)
000117 15e4      	CP   R30,R4
000118 05f5      	CPC  R31,R5
000119 f009      	BREQ _0x17
                 _0x16:
00011a c00c      	RJMP _0x15
                 _0x17:
                 ; 0000 0050                  lcd_putchar(key_number[row][column]);
00011b 940e 02b5 	CALL SUBOPT_0x0
00011d 940e 02d0 	CALL SUBOPT_0x3
                 ; 0000 0051                  password3 = key_number[row][column] ;
00011f e0a4      	LDI  R26,LOW(_password3)
000120 e0b0      	LDI  R27,HIGH(_password3)
000121 e0f0      	LDI  R31,0
000122 940e 0350 	CALL __EEPROMWRW
                 ; 0000 0052                  position = 4  ;
000124 e0e4      	LDI  R30,LOW(4)
000125 e0f0      	LDI  R31,HIGH(4)
000126 c069      	RJMP _0x45
                 ; 0000 0053              }else if (isPassword == -1 && position == 4) {
                 _0x15:
000127 940e 02c8 	CALL SUBOPT_0x2
000129 f429      	BRNE _0x1A
00012a e0e4      	LDI  R30,LOW(4)
00012b e0f0      	LDI  R31,HIGH(4)
00012c 15e4      	CP   R30,R4
00012d 05f5      	CPC  R31,R5
00012e f009      	BREQ _0x1B
                 _0x1A:
00012f c018      	RJMP _0x19
                 _0x1B:
                 ; 0000 0054                  password4 = key_number[row][column] ;
000130 940e 02e0 	CALL SUBOPT_0x4
000132 91e4      	LPM  R30,Z
000133 e0a6      	LDI  R26,LOW(_password4)
000134 e0b0      	LDI  R27,HIGH(_password4)
000135 e0f0      	LDI  R31,0
000136 940e 0350 	CALL __EEPROMWRW
                 ; 0000 0055                  lcd_clear();
000138 d105      	RCALL _lcd_clear
                 ; 0000 0056                  lcd_putsf ("Password Seted Successfully");
                +
000139 e8af     +LDI R26 , LOW ( 2 * _0x0 + ( 29 ) )
00013a e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 29 ) )
                 	__POINTW2FN _0x0,29
00013b d130      	RCALL _lcd_putsf
                 ; 0000 0057                  isPassword = 1 ;
00013c e0a8      	LDI  R26,LOW(_isPassword)
00013d e0b0      	LDI  R27,HIGH(_isPassword)
00013e e0e1      	LDI  R30,LOW(1)
00013f e0f0      	LDI  R31,HIGH(1)
000140 940e 0350 	CALL __EEPROMWRW
                 ; 0000 0058                  position = 1 ;
000142 012f      	MOVW R4,R30
                 ; 0000 0059                  delay_ms(2000) ;
000143 eda0      	LDI  R26,LOW(2000)
000144 e0b7      	LDI  R27,HIGH(2000)
000145 940e 02ed 	CALL SUBOPT_0x5
                 ; 0000 005A                  lcd_clear();
                 ; 0000 005B                  lcd_putsf ("Please insert your password");
                 ; 0000 005C 
                 ; 0000 005D              }else if (isPassword == 1 && position == 1) {
000147 c049      	RJMP _0x1C
                 _0x19:
000148 940e 02f5 	CALL SUBOPT_0x6
00014a f429      	BRNE _0x1E
00014b e0e1      	LDI  R30,LOW(1)
00014c e0f0      	LDI  R31,HIGH(1)
00014d 15e4      	CP   R30,R4
00014e 05f5      	CPC  R31,R5
00014f f009      	BREQ _0x1F
                 _0x1E:
000150 c00a      	RJMP _0x1D
                 _0x1F:
                 ; 0000 005E                  lcd_clear();
000151 d0ec      	RCALL _lcd_clear
                 ; 0000 005F                  lcd_putchar(key_number[row][column]);
000152 940e 02b5 	CALL SUBOPT_0x0
000154 940e 02fb 	CALL SUBOPT_0x7
                 ; 0000 0060                  pass1 = key_number[row][column] ;
000156 9064      	LPM  R6,Z
000157 2477      	CLR  R7
                 ; 0000 0061                  position = 2 ;
000158 e0e2      	LDI  R30,LOW(2)
000159 e0f0      	LDI  R31,HIGH(2)
00015a c035      	RJMP _0x45
                 ; 0000 0062              }else if (isPassword == 1 && position == 2) {
                 _0x1D:
00015b 940e 02f5 	CALL SUBOPT_0x6
00015d f429      	BRNE _0x22
00015e e0e2      	LDI  R30,LOW(2)
00015f e0f0      	LDI  R31,HIGH(2)
000160 15e4      	CP   R30,R4
000161 05f5      	CPC  R31,R5
000162 f009      	BREQ _0x23
                 _0x22:
000163 c009      	RJMP _0x21
                 _0x23:
                 ; 0000 0063                  lcd_putchar(key_number[row][column]);
000164 940e 02b5 	CALL SUBOPT_0x0
000166 940e 02fb 	CALL SUBOPT_0x7
                 ; 0000 0064                  pass2 = key_number[row][column] ;
000168 9084      	LPM  R8,Z
000169 2499      	CLR  R9
                 ; 0000 0065                  position = 3 ;
00016a e0e3      	LDI  R30,LOW(3)
00016b e0f0      	LDI  R31,HIGH(3)
00016c c023      	RJMP _0x45
                 ; 0000 0066              }else if (isPassword == 1 && position == 3) {
                 _0x21:
00016d 940e 02f5 	CALL SUBOPT_0x6
00016f f429      	BRNE _0x26
000170 e0e3      	LDI  R30,LOW(3)
000171 e0f0      	LDI  R31,HIGH(3)
000172 15e4      	CP   R30,R4
000173 05f5      	CPC  R31,R5
000174 f009      	BREQ _0x27
                 _0x26:
000175 c009      	RJMP _0x25
                 _0x27:
                 ; 0000 0067                  lcd_putchar(key_number[row][column]);
000176 940e 02b5 	CALL SUBOPT_0x0
000178 940e 02fb 	CALL SUBOPT_0x7
                 ; 0000 0068                  pass3 = key_number[row][column] ;
00017a 90a4      	LPM  R10,Z
00017b 24bb      	CLR  R11
                 ; 0000 0069                  position = 4 ;
00017c e0e4      	LDI  R30,LOW(4)
00017d e0f0      	LDI  R31,HIGH(4)
00017e c011      	RJMP _0x45
                 ; 0000 006A              }else if (isPassword == 1 && position == 4) {
                 _0x25:
00017f 940e 02f5 	CALL SUBOPT_0x6
000181 f429      	BRNE _0x2A
000182 e0e4      	LDI  R30,LOW(4)
000183 e0f0      	LDI  R31,HIGH(4)
000184 15e4      	CP   R30,R4
000185 05f5      	CPC  R31,R5
000186 f009      	BREQ _0x2B
                 _0x2A:
000187 c009      	RJMP _0x29
                 _0x2B:
                 ; 0000 006B                  lcd_putchar(key_number[row][column]);
000188 940e 02b5 	CALL SUBOPT_0x0
00018a 940e 02fb 	CALL SUBOPT_0x7
                 ; 0000 006C                  pass4 = key_number[row][column] ;
00018c 90c4      	LPM  R12,Z
00018d 24dd      	CLR  R13
                 ; 0000 006D                  position = 5 ;
00018e e0e5      	LDI  R30,LOW(5)
00018f e0f0      	LDI  R31,HIGH(5)
                 _0x45:
000190 012f      	MOVW R4,R30
                 ; 0000 006E              }
                 ; 0000 006F 
                 ; 0000 0070               if (key_number[row][column] == '='){
                 _0x29:
                 _0x1C:
000191 940e 02b5 	CALL SUBOPT_0x0
000193 33ad      	CPI  R26,LOW(0x3D)
000194 f009      	BREQ PC+2
000195 c048      	RJMP _0x2C
                 ; 0000 0071                 if (password1 == pass1) {
000196 940e 02fe 	CALL SUBOPT_0x8
000198 f599      	BRNE _0x2D
                 ; 0000 0072                    if (password2 == pass2){
000199 940e 0305 	CALL SUBOPT_0x9
00019b f539      	BRNE _0x2E
                 ; 0000 0073                      if (password3 == pass3){
00019c 940e 030c 	CALL SUBOPT_0xA
00019e f4d9      	BRNE _0x2F
                 ; 0000 0074                        if(password4 == pass4){
00019f 940e 0313 	CALL SUBOPT_0xB
0001a1 f479      	BRNE _0x30
                 ; 0000 0075                          lcd_clear();
0001a2 d09b      	RCALL _lcd_clear
                 ; 0000 0076                          lcd_putsf ("ok");
                +
0001a3 eca7     +LDI R26 , LOW ( 2 * _0x0 + ( 85 ) )
0001a4 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 85 ) )
                 	__POINTW2FN _0x0,85
0001a5 940e 031a 	CALL SUBOPT_0xC
                 ; 0000 0077                          delay_ms(1500);
                 ; 0000 0078                          lcd_clear();
                 ; 0000 0079                          lcd_putsf ("Please insert your password");
                 ; 0000 007A                          position = 1 ;
0001a7 e0e1      	LDI  R30,LOW(1)
0001a8 e0f0      	LDI  R31,HIGH(1)
0001a9 012f      	MOVW R4,R30
                 ; 0000 007B 
                 ; 0000 007C                          if (PORTB.0 == 0){
0001aa 99c0      	SBIC 0x18,0
0001ab c002      	RJMP _0x31
                 ; 0000 007D                          PORTB.0 = 1;}
0001ac 9ac0      	SBI  0x18,0
                 ; 0000 007E                          else if (PORTB.0 == 1){
0001ad c002      	RJMP _0x34
                 _0x31:
0001ae 99c0      	SBIC 0x18,0
                 ; 0000 007F                          PORTB.0 = 0;}
0001af 98c0      	CBI  0x18,0
                 ; 0000 0080                          }else if(password4 != pass4){
                 _0x34:
0001b0 c008      	RJMP _0x38
                 _0x30:
0001b1 940e 0313 	CALL SUBOPT_0xB
0001b3 f029      	BREQ _0x39
                 ; 0000 0081                          lcd_clear();
0001b4 940e 031f 	CALL SUBOPT_0xD
                 ; 0000 0082                          lcd_putsf ("Password wrong !!!");
                 ; 0000 0083                          delay_ms(1500);
                 ; 0000 0084                          lcd_clear();
                 ; 0000 0085                          lcd_putsf ("Please insert your password");
                 ; 0000 0086                          position = 1 ;}
0001b6 e0e1      	LDI  R30,LOW(1)
0001b7 e0f0      	LDI  R31,HIGH(1)
0001b8 012f      	MOVW R4,R30
                 ; 0000 0087                        }else if(password3 != pass3){
                 _0x39:
                 _0x38:
0001b9 c008      	RJMP _0x3A
                 _0x2F:
0001ba 940e 030c 	CALL SUBOPT_0xA
0001bc f029      	BREQ _0x3B
                 ; 0000 0088                          lcd_clear();
0001bd 940e 031f 	CALL SUBOPT_0xD
                 ; 0000 0089                          lcd_putsf ("Password wrong !!!");
                 ; 0000 008A                          delay_ms(1500);
                 ; 0000 008B                          lcd_clear();
                 ; 0000 008C                          lcd_putsf ("Please insert your password");
                 ; 0000 008D                          position = 1 ;}
0001bf e0e1      	LDI  R30,LOW(1)
0001c0 e0f0      	LDI  R31,HIGH(1)
0001c1 012f      	MOVW R4,R30
                 ; 0000 008E                      }else if(password2 != pass2){
                 _0x3B:
                 _0x3A:
0001c2 c008      	RJMP _0x3C
                 _0x2E:
0001c3 940e 0305 	CALL SUBOPT_0x9
0001c5 f029      	BREQ _0x3D
                 ; 0000 008F                          lcd_clear();
0001c6 940e 031f 	CALL SUBOPT_0xD
                 ; 0000 0090                          lcd_putsf ("Password wrong !!!");
                 ; 0000 0091                          delay_ms(1500);
                 ; 0000 0092                          lcd_clear();
                 ; 0000 0093                          lcd_putsf ("Please insert your password");
                 ; 0000 0094                          position = 1 ;}
0001c8 e0e1      	LDI  R30,LOW(1)
0001c9 e0f0      	LDI  R31,HIGH(1)
0001ca 012f      	MOVW R4,R30
                 ; 0000 0095                 }else if(password1 != pass1){
                 _0x3D:
                 _0x3C:
0001cb c012      	RJMP _0x3E
                 _0x2D:
0001cc 940e 02fe 	CALL SUBOPT_0x8
0001ce f079      	BREQ _0x3F
                 ; 0000 0096                          lcd_clear();
0001cf d06e      	RCALL _lcd_clear
                 ; 0000 0097                          lcd_putsf ("Password wrong !!!");
                +
0001d0 ecaa     +LDI R26 , LOW ( 2 * _0x0 + ( 88 ) )
0001d1 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 88 ) )
                 	__POINTW2FN _0x0,88
0001d2 d099      	RCALL _lcd_putsf
                 ; 0000 0098                          delay_ms(1500);
0001d3 edac      	LDI  R26,LOW(1500)
0001d4 e0b5      	LDI  R27,HIGH(1500)
0001d5 940e 0331 	CALL _delay_ms
                 ; 0000 0099                          lcd_clear();
0001d7 d066      	RCALL _lcd_clear
                 ; 0000 009A                          lcd_putsf ("Please insert your password");
                +
0001d8 eaab     +LDI R26 , LOW ( 2 * _0x0 + ( 57 ) )
0001d9 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 57 ) )
                 	__POINTW2FN _0x0,57
                 _0x44:
0001da d091      	RCALL _lcd_putsf
                 ; 0000 009B                          position = 1 ;}
0001db e0e1      	LDI  R30,LOW(1)
0001dc e0f0      	LDI  R31,HIGH(1)
0001dd 012f      	MOVW R4,R30
                 ; 0000 009C 
                 ; 0000 009D               }
                 _0x3F:
                 _0x3E:
                 ; 0000 009E 
                 ; 0000 009F 
                 ; 0000 00A0 //                 if (key_number[row][column] == '+'){
                 ; 0000 00A1 //                 lcd_clear();
                 ; 0000 00A2 //                 lcd_putchar(password1);
                 ; 0000 00A3 //                 lcd_putchar(password2);
                 ; 0000 00A4 //                 lcd_putchar(password3);
                 ; 0000 00A5 //                 lcd_putchar(password4);
                 ; 0000 00A6 //                 }
                 ; 0000 00A7 
                 ; 0000 00A8 
                 ; 0000 00A9 
                 ; 0000 00AA              }
                 _0x2C:
                 ; 0000 00AB 
                 ; 0000 00AC 
                 ; 0000 00AD           //       else if ( isPassword == -1 && position == -1 ) {
                 ; 0000 00AE         //         lcd_putsf ("Please choose a new password");
                 ; 0000 00AF       //           position = 1 ;
                 ; 0000 00B0     //         } if (isPassword == -1 && position == 1) {
                 ; 0000 00B1 //                 lcd_clear();
                 ; 0000 00B2 //                 lcd_putchar(key_number[row][column]);
                 ; 0000 00B3  //                password1 = key_number[row][column] ;
                 ; 0000 00B4   //               position = 2 ;      }
                 ; 0000 00B5 //             }else if (isPassword == -1 && position == 2) {
                 ; 0000 00B6 //                 lcd_putchar(key_number[row][column]);
                 ; 0000 00B7 //                 password2 = key_number[row][column] ;
                 ; 0000 00B8 //                 position = 3 ;
                 ; 0000 00B9 //             }else if (isPassword == -1 && position == 3) {
                 ; 0000 00BA //                 lcd_putchar(key_number[row][column]);
                 ; 0000 00BB //                 password3 = key_number[row][column] ;
                 ; 0000 00BC //                 position = 4  ;
                 ; 0000 00BD //             }else if (isPassword == -1 && position == 4) {
                 ; 0000 00BE //                 password4 = key_number[row][column] ;
                 ; 0000 00BF //                 lcd_clear();
                 ; 0000 00C0 //                 lcd_putsf ("Password Seted Successfully");
                 ; 0000 00C1 //                 isPassword = 1 ;
                 ; 0000 00C2 //                 position = 1 ;
                 ; 0000 00C3 //             }else if (isPassword == 1 && position == 1  ) {
                 ; 0000 00C4 //                 lcd_clear();
                 ; 0000 00C5 //                 lcd_putsf ("yessssss");
                 ; 0000 00C6 //             }
                 ; 0000 00C7 
                 ; 0000 00C8          }
                 ; 0000 00C9 
                 ; 0000 00CA 
                 ; 0000 00CB 
                 ; 0000 00CC    }
                 _0x6:
0001de 5f1f      	SUBI R17,-1
0001df ced4      	RJMP _0x4
                 _0x5:
                 ; 0000 00CD    PORTD = 0xF0;
0001e0 efe0      	LDI  R30,LOW(240)
0001e1 bbe2      	OUT  0x12,R30
                 ; 0000 00CE 
                 ; 0000 00CF    }
0001e2 940e 036e 	CALL __LOADLOCR4
0001e4 9624      	ADIW R28,4
0001e5 91e9      	LD   R30,Y+
0001e6 bfef      	OUT  SREG,R30
0001e7 91f9      	LD   R31,Y+
0001e8 91e9      	LD   R30,Y+
0001e9 91b9      	LD   R27,Y+
0001ea 91a9      	LD   R26,Y+
0001eb 9199      	LD   R25,Y+
0001ec 9189      	LD   R24,Y+
0001ed 9179      	LD   R23,Y+
0001ee 9169      	LD   R22,Y+
0001ef 90f9      	LD   R15,Y+
0001f0 9019      	LD   R1,Y+
0001f1 9009      	LD   R0,Y+
0001f2 9518      	RETI
                 ; .FEND
                 ;
                 ;
                 ;
                 ;
                 ;void main(void){
                 ; 0000 00D4 void main(void){
                 _main:
                 ; .FSTART _main
                 ; 0000 00D5 // Declare your local variables here
                 ; 0000 00D6 
                 ; 0000 00D7 // Input/Output Ports initialization
                 ; 0000 00D8 // Port A initialization
                 ; 0000 00D9 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00DA DDRA=(0<<DDA7) | (0<<DDA6) | (0<<DDA5) | (0<<DDA4) | (0<<DDA3) | (0<<DDA2) | (0<<DDA1) | (0<<DDA0);
0001f3 e0e0      	LDI  R30,LOW(0)
0001f4 bbea      	OUT  0x1A,R30
                 ; 0000 00DB // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00DC PORTA=(0<<PORTA7) | (0<<PORTA6) | (0<<PORTA5) | (0<<PORTA4) | (0<<PORTA3) | (0<<PORTA2) | (0<<PORTA1) | (0<<PORTA0);
0001f5 bbeb      	OUT  0x1B,R30
                 ; 0000 00DD 
                 ; 0000 00DE // Port B initialization
                 ; 0000 00DF // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=In Bit2=In Bit1=In Bit0=In
                 ; 0000 00E0 DDRB=(0<<DDB7) | (0<<DDB6) | (0<<DDB5) | (0<<DDB4) | (0<<DDB3) | (0<<DDB2) | (1<<DDB1) | (1<<DDB0);
0001f6 e0e3      	LDI  R30,LOW(3)
0001f7 bbe7      	OUT  0x17,R30
                 ; 0000 00E1 // State: Bit7=T Bit6=T Bit5=T Bit4=T Bit3=T Bit2=T Bit1=T Bit0=T
                 ; 0000 00E2 PORTB=(0<<PORTB7) | (0<<PORTB6) | (0<<PORTB5) | (0<<PORTB4) | (0<<PORTB3) | (0<<PORTB2) | (1<<PORTB1) | (0<<PORTB0);
0001f8 e0e2      	LDI  R30,LOW(2)
0001f9 bbe8      	OUT  0x18,R30
                 ; 0000 00E3 
                 ; 0000 00E4 // Port D initialization
                 ; 0000 00E5 // Function: Bit7=In Bit6=In Bit5=In Bit4=In Bit3=Out Bit2=Out Bit1=Out Bit0=Out
                 ; 0000 00E6 DDRD=(0<<DDD7) | (0<<DDD6) | (0<<DDD5) | (0<<DDD4) | (1<<DDD3) | (1<<DDD2) | (1<<DDD1) | (1<<DDD0);
0001fa e0ef      	LDI  R30,LOW(15)
0001fb bbe1      	OUT  0x11,R30
                 ; 0000 00E7 // State: Bit7=P Bit6=P Bit5=P Bit4=P Bit3=0 Bit2=0 Bit1=0 Bit0=0
                 ; 0000 00E8 PORTD=(1<<PORTD7) | (1<<PORTD6) | (1<<PORTD5) | (1<<PORTD4) | (0<<PORTD3) | (0<<PORTD2) | (0<<PORTD1) | (0<<PORTD0);
0001fc efe0      	LDI  R30,LOW(240)
0001fd bbe2      	OUT  0x12,R30
                 ; 0000 00E9 
                 ; 0000 00EA 
                 ; 0000 00EB // External Interrupt(s) initialization
                 ; 0000 00EC // INT0: Off
                 ; 0000 00ED // INT1: Off
                 ; 0000 00EE // INT2: On
                 ; 0000 00EF // INT2 Mode: Falling Edge
                 ; 0000 00F0 GICR|=(0<<INT1) | (0<<INT0) | (1<<INT2);
0001fe b7eb      	IN   R30,0x3B
0001ff 62e0      	ORI  R30,0x20
000200 bfeb      	OUT  0x3B,R30
                 ; 0000 00F1 MCUCR=(0<<ISC11) | (0<<ISC10) | (0<<ISC01) | (0<<ISC00);
000201 e0e0      	LDI  R30,LOW(0)
000202 bfe5      	OUT  0x35,R30
                 ; 0000 00F2 MCUCSR=(0<<ISC2);
000203 bfe4      	OUT  0x34,R30
                 ; 0000 00F3 GIFR=(0<<INTF1) | (0<<INTF0) | (1<<INTF2);
000204 e2e0      	LDI  R30,LOW(32)
000205 bfea      	OUT  0x3A,R30
                 ; 0000 00F4 
                 ; 0000 00F5 // Alphanumeric LCD initialization
                 ; 0000 00F6 // Connections are specified in the
                 ; 0000 00F7 // Project|Configure|C Compiler|Libraries|Alphanumeric LCD menu:
                 ; 0000 00F8 // RS - PORTA Bit 0
                 ; 0000 00F9 // RD - PORTA Bit 1
                 ; 0000 00FA // EN - PORTA Bit 2
                 ; 0000 00FB // D4 - PORTA Bit 4
                 ; 0000 00FC // D5 - PORTA Bit 5
                 ; 0000 00FD // D6 - PORTA Bit 6
                 ; 0000 00FE // D7 - PORTA Bit 7
                 ; 0000 00FF // Characters/line: 16
                 ; 0000 0100 lcd_init(16);
000206 e1a0      	LDI  R26,LOW(16)
000207 d077      	RCALL _lcd_init
                 ; 0000 0101 
                 ; 0000 0102 // Global enable interrupts
                 ; 0000 0103 #asm("sei")
000208 9478      	sei
                 ; 0000 0104 
                 ; 0000 0105 while (1){
                 _0x40:
                 ; 0000 0106 
                 ; 0000 0107   idle();
000209 940e 02ad 	CALL _idle
                 ; 0000 0108  //Ba dastoore idele() CPU be halate Sleep rafte va faghat
                 ; 0000 0109  // ba interrupt az khab bidar migardad. Gozashtane in dastoor
                 ; 0000 010A  // baes migardad dar tavane masrafi sarfejooyi shode va micro bihoode dagh nagardad.
                 ; 0000 010B }
00020b cffd      	RJMP _0x40
                 ; 0000 010C 
                 ; 0000 010D 
                 ; 0000 010E }
                 _0x43:
00020c cfff      	RJMP _0x43
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.DSEG
                 
                 	.CSEG
                 __lcd_write_nibble_G100:
                 ; .FSTART __lcd_write_nibble_G100
00020d 93aa      	ST   -Y,R26
00020e b3eb      	IN   R30,0x1B
00020f 70ef      	ANDI R30,LOW(0xF)
000210 2fae      	MOV  R26,R30
000211 81e8      	LD   R30,Y
000212 7fe0      	ANDI R30,LOW(0xF0)
000213 2bea      	OR   R30,R26
000214 bbeb      	OUT  0x1B,R30
                +
000215 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
000216 958a     +DEC R24
000217 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000218 9ada      	SBI  0x1B,2
                +
000219 e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00021a 958a     +DEC R24
00021b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
00021c 98da      	CBI  0x1B,2
                +
00021d e082     +LDI R24 , LOW ( 2 )
                +__DELAY_USB_LOOP :
00021e 958a     +DEC R24
00021f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 2
000220 c08a      	RJMP _0x2040001
                 ; .FEND
                 __lcd_write_data:
                 ; .FSTART __lcd_write_data
000221 93aa      	ST   -Y,R26
000222 81a8      	LD   R26,Y
000223 dfe9      	RCALL __lcd_write_nibble_G100
000224 81e8          ld    r30,y
000225 95e2          swap  r30
000226 83e8          st    y,r30
000227 81a8      	LD   R26,Y
000228 dfe4      	RCALL __lcd_write_nibble_G100
                +
000229 e181     +LDI R24 , LOW ( 17 )
                +__DELAY_USB_LOOP :
00022a 958a     +DEC R24
00022b f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 17
00022c c07e      	RJMP _0x2040001
                 ; .FEND
                 _lcd_gotoxy:
                 ; .FSTART _lcd_gotoxy
00022d 93aa      	ST   -Y,R26
00022e 81e8      	LD   R30,Y
00022f e0f0      	LDI  R31,0
000230 5ae0      	SUBI R30,LOW(-__base_y_G100)
000231 4ffd      	SBCI R31,HIGH(-__base_y_G100)
000232 81e0      	LD   R30,Z
000233 81a9      	LDD  R26,Y+1
000234 0fae      	ADD  R26,R30
000235 dfeb      	RCALL __lcd_write_data
000236 81e9      	LDD  R30,Y+1
000237 93e0 0264 	STS  __lcd_x,R30
000239 81e8      	LD   R30,Y
00023a 93e0 0265 	STS  __lcd_y,R30
00023c 9622      	ADIW R28,2
00023d 9508      	RET
                 ; .FEND
                 _lcd_clear:
                 ; .FSTART _lcd_clear
00023e e0a2      	LDI  R26,LOW(2)
00023f 940e 0324 	CALL SUBOPT_0xE
000241 e0ac      	LDI  R26,LOW(12)
000242 dfde      	RCALL __lcd_write_data
000243 e0a1      	LDI  R26,LOW(1)
000244 940e 0324 	CALL SUBOPT_0xE
000246 e0e0      	LDI  R30,LOW(0)
000247 93e0 0265 	STS  __lcd_y,R30
000249 93e0 0264 	STS  __lcd_x,R30
00024b 9508      	RET
                 ; .FEND
                 _lcd_putchar:
                 ; .FSTART _lcd_putchar
00024c 93aa      	ST   -Y,R26
00024d 81a8      	LD   R26,Y
00024e 30aa      	CPI  R26,LOW(0xA)
00024f f031      	BREQ _0x2000005
000250 91e0 0266 	LDS  R30,__lcd_maxx
000252 91a0 0264 	LDS  R26,__lcd_x
000254 17ae      	CP   R26,R30
000255 f060      	BRLO _0x2000004
                 _0x2000005:
000256 e0e0      	LDI  R30,LOW(0)
000257 93ea      	ST   -Y,R30
000258 91a0 0265 	LDS  R26,__lcd_y
00025a 5faf      	SUBI R26,-LOW(1)
00025b 93a0 0265 	STS  __lcd_y,R26
00025d dfcf      	RCALL _lcd_gotoxy
00025e 81a8      	LD   R26,Y
00025f 30aa      	CPI  R26,LOW(0xA)
000260 f409      	BRNE _0x2000007
000261 c049      	RJMP _0x2040001
                 _0x2000007:
                 _0x2000004:
000262 91e0 0264 	LDS  R30,__lcd_x
000264 5fef      	SUBI R30,-LOW(1)
000265 93e0 0264 	STS  __lcd_x,R30
000267 9ad8      	SBI  0x1B,0
000268 81a8      	LD   R26,Y
000269 dfb7      	RCALL __lcd_write_data
00026a 98d8      	CBI  0x1B,0
00026b c03f      	RJMP _0x2040001
                 ; .FEND
                 _lcd_putsf:
                 ; .FSTART _lcd_putsf
00026c 93ba      	ST   -Y,R27
00026d 93aa      	ST   -Y,R26
00026e 931a      	ST   -Y,R17
                 _0x200000B:
00026f 81e9      	LDD  R30,Y+1
000270 81fa      	LDD  R31,Y+1+1
000271 9631      	ADIW R30,1
000272 83e9      	STD  Y+1,R30
000273 83fa      	STD  Y+1+1,R31
000274 9731      	SBIW R30,1
000275 91e4      	LPM  R30,Z
000276 2f1e      	MOV  R17,R30
000277 30e0      	CPI  R30,0
000278 f019      	BREQ _0x200000D
000279 2fa1      	MOV  R26,R17
00027a dfd1      	RCALL _lcd_putchar
00027b cff3      	RJMP _0x200000B
                 _0x200000D:
00027c 8118      	LDD  R17,Y+0
00027d 9623      	ADIW R28,3
00027e 9508      	RET
                 ; .FEND
                 _lcd_init:
                 ; .FSTART _lcd_init
00027f 93aa      	ST   -Y,R26
000280 b3ea      	IN   R30,0x1A
000281 6fe0      	ORI  R30,LOW(0xF0)
000282 bbea      	OUT  0x1A,R30
000283 9ad2      	SBI  0x1A,2
000284 9ad0      	SBI  0x1A,0
000285 9ad1      	SBI  0x1A,1
000286 98da      	CBI  0x1B,2
000287 98d8      	CBI  0x1B,0
000288 98d9      	CBI  0x1B,1
000289 81e8      	LD   R30,Y
00028a 93e0 0266 	STS  __lcd_maxx,R30
00028c 58e0      	SUBI R30,-LOW(128)
                +
00028d 93e0 0262+STS __base_y_G100 + ( 2 ) , R30
                 	__PUTB1MN __base_y_G100,2
00028f 81e8      	LD   R30,Y
000290 54e0      	SUBI R30,-LOW(192)
                +
000291 93e0 0263+STS __base_y_G100 + ( 3 ) , R30
                 	__PUTB1MN __base_y_G100,3
000293 e1a4      	LDI  R26,LOW(20)
000294 e0b0      	LDI  R27,0
000295 940e 0331 	CALL _delay_ms
000297 940e 032a 	CALL SUBOPT_0xF
000299 940e 032a 	CALL SUBOPT_0xF
00029b 940e 032a 	CALL SUBOPT_0xF
00029d e2a0      	LDI  R26,LOW(32)
00029e df6e      	RCALL __lcd_write_nibble_G100
                +
00029f e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
0002a0 958a     +DEC R24
0002a1 f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
0002a2 e2a8      	LDI  R26,LOW(40)
0002a3 df7d      	RCALL __lcd_write_data
0002a4 e0a4      	LDI  R26,LOW(4)
0002a5 df7b      	RCALL __lcd_write_data
0002a6 e8a5      	LDI  R26,LOW(133)
0002a7 df79      	RCALL __lcd_write_data
0002a8 e0a6      	LDI  R26,LOW(6)
0002a9 df77      	RCALL __lcd_write_data
0002aa df93      	RCALL _lcd_clear
                 _0x2040001:
0002ab 9621      	ADIW R28,1
0002ac 9508      	RET
                 ; .FEND
                 	#ifndef __SLEEP_DEFINED__
                 	#endif
                 
                 	.CSEG
                 _idle:
                 ; .FSTART _idle
0002ad b7e5         in   r30,power_ctrl_reg
0002ae 78ef         cbr  r30,__sm_mask
0002af bfe5         out  power_ctrl_reg,r30
0002b0 b7ef         in   r30,sreg
0002b1 9478         sei
0002b2 9588         sleep
0002b3 bfef         out  sreg,r30
0002b4 9508      	RET
                 ; .FEND
                 
                 	.ESEG
                 _password1:
000000 ff
000001 ff        	.DB  0xFF,0xFF
                 _password2:
000002 ff
000003 ff        	.DB  0xFF,0xFF
                 _password3:
000004 ff
000005 ff        	.DB  0xFF,0xFF
                 _password4:
000006 ff
000007 ff        	.DB  0xFF,0xFF
                 _isPassword:
000008 ff
000009 ff        	.DB  0xFF,0xFF
                 
                 	.DSEG
                 __base_y_G100:
000260           	.BYTE 0x4
                 __lcd_x:
000264           	.BYTE 0x1
                 __lcd_y:
000265           	.BYTE 0x1
                 __lcd_maxx:
000266           	.BYTE 0x1
                 
                 	.CSEG
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 9 TIMES, CODE SIZE REDUCTION:85 WORDS
                 SUBOPT_0x0:
0002b5 2fe1      	MOV  R30,R17
0002b6 e5a8      	LDI  R26,LOW(_key_number*2)
0002b7 e0b0      	LDI  R27,HIGH(_key_number*2)
0002b8 e0f0      	LDI  R31,0
0002b9 940e 033b 	CALL __LSLW2
0002bb 0fae      	ADD  R26,R30
0002bc 1fbf      	ADC  R27,R31
0002bd 2fe0      	MOV  R30,R16
0002be e0f0      	LDI  R31,0
0002bf 0fea      	ADD  R30,R26
0002c0 1ffb      	ADC  R31,R27
0002c1 91a4      	LPM  R26,Z
0002c2 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0x1:
0002c3 efef      	LDI  R30,LOW(65535)
0002c4 efff      	LDI  R31,HIGH(65535)
0002c5 940e 0350 	CALL __EEPROMWRW
0002c7 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:12 WORDS
                 SUBOPT_0x2:
0002c8 e0a8      	LDI  R26,LOW(_isPassword)
0002c9 e0b0      	LDI  R27,HIGH(_isPassword)
0002ca 940e 0340 	CALL __EEPROMRDW
0002cc 3fef      	CPI  R30,LOW(0xFFFF)
0002cd efaf      	LDI  R26,HIGH(0xFFFF)
0002ce 07fa      	CPC  R31,R26
0002cf 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:23 WORDS
                 SUBOPT_0x3:
0002d0 940e 024c 	CALL _lcd_putchar
0002d2 2fe1      	MOV  R30,R17
0002d3 e5a8      	LDI  R26,LOW(_key_number*2)
0002d4 e0b0      	LDI  R27,HIGH(_key_number*2)
0002d5 e0f0      	LDI  R31,0
0002d6 940e 033b 	CALL __LSLW2
0002d8 0fae      	ADD  R26,R30
0002d9 1fbf      	ADC  R27,R31
0002da 2fe0      	MOV  R30,R16
0002db e0f0      	LDI  R31,0
0002dc 0fea      	ADD  R30,R26
0002dd 1ffb      	ADC  R31,R27
0002de 91e4      	LPM  R30,Z
0002df 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:37 WORDS
                 SUBOPT_0x4:
0002e0 2fe1      	MOV  R30,R17
0002e1 e5a8      	LDI  R26,LOW(_key_number*2)
0002e2 e0b0      	LDI  R27,HIGH(_key_number*2)
0002e3 e0f0      	LDI  R31,0
0002e4 940e 033b 	CALL __LSLW2
0002e6 0fae      	ADD  R26,R30
0002e7 1fbf      	ADC  R27,R31
0002e8 2fe0      	MOV  R30,R16
0002e9 e0f0      	LDI  R31,0
0002ea 0fea      	ADD  R30,R26
0002eb 1ffb      	ADC  R31,R27
0002ec 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 5 TIMES, CODE SIZE REDUCTION:21 WORDS
                 SUBOPT_0x5:
0002ed 940e 0331 	CALL _delay_ms
0002ef 940e 023e 	CALL _lcd_clear
                +
0002f1 eaab     +LDI R26 , LOW ( 2 * _0x0 + ( 57 ) )
0002f2 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 57 ) )
                 	__POINTW2FN _0x0,57
0002f3 940c 026c 	JMP  _lcd_putsf
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:6 WORDS
                 SUBOPT_0x6:
0002f5 e0a8      	LDI  R26,LOW(_isPassword)
0002f6 e0b0      	LDI  R27,HIGH(_isPassword)
0002f7 940e 0340 	CALL __EEPROMRDW
0002f9 9731      	SBIW R30,1
0002fa 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:3 WORDS
                 SUBOPT_0x7:
0002fb 940e 024c 	CALL _lcd_putchar
0002fd cfe2      	RJMP SUBOPT_0x4
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x8:
0002fe e0a0      	LDI  R26,LOW(_password1)
0002ff e0b0      	LDI  R27,HIGH(_password1)
000300 940e 0340 	CALL __EEPROMRDW
000302 166e      	CP   R6,R30
000303 067f      	CPC  R7,R31
000304 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0x9:
000305 e0a2      	LDI  R26,LOW(_password2)
000306 e0b0      	LDI  R27,HIGH(_password2)
000307 940e 0340 	CALL __EEPROMRDW
000309 168e      	CP   R8,R30
00030a 069f      	CPC  R9,R31
00030b 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xA:
00030c e0a4      	LDI  R26,LOW(_password3)
00030d e0b0      	LDI  R27,HIGH(_password3)
00030e 940e 0340 	CALL __EEPROMRDW
000310 16ae      	CP   R10,R30
000311 06bf      	CPC  R11,R31
000312 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xB:
000313 e0a6      	LDI  R26,LOW(_password4)
000314 e0b0      	LDI  R27,HIGH(_password4)
000315 940e 0340 	CALL __EEPROMRDW
000317 16ce      	CP   R12,R30
000318 06df      	CPC  R13,R31
000319 9508      	RET
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 4 TIMES, CODE SIZE REDUCTION:9 WORDS
                 SUBOPT_0xC:
00031a 940e 026c 	CALL _lcd_putsf
00031c edac      	LDI  R26,LOW(1500)
00031d e0b5      	LDI  R27,HIGH(1500)
00031e cfce      	RJMP SUBOPT_0x5
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xD:
00031f 940e 023e 	CALL _lcd_clear
                +
000321 ecaa     +LDI R26 , LOW ( 2 * _0x0 + ( 88 ) )
000322 e0b0     +LDI R27 , HIGH ( 2 * _0x0 + ( 88 ) )
                 	__POINTW2FN _0x0,88
000323 cff6      	RJMP SUBOPT_0xC
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 2 TIMES, CODE SIZE REDUCTION:1 WORDS
                 SUBOPT_0xE:
000324 940e 0221 	CALL __lcd_write_data
000326 e0a3      	LDI  R26,LOW(3)
000327 e0b0      	LDI  R27,0
000328 940c 0331 	JMP  _delay_ms
                 
                 ;OPTIMIZER ADDED SUBROUTINE, CALLED 3 TIMES, CODE SIZE REDUCTION:5 WORDS
                 SUBOPT_0xF:
00032a e3a0      	LDI  R26,LOW(48)
00032b 940e 020d 	CALL __lcd_write_nibble_G100
                +
00032d e281     +LDI R24 , LOW ( 33 )
                +__DELAY_USB_LOOP :
00032e 958a     +DEC R24
00032f f7f1     +BRNE __DELAY_USB_LOOP
                 	__DELAY_USB 33
000330 9508      	RET
                 
                 
                 	.CSEG
                 _delay_ms:
000331 9610      	adiw r26,0
000332 f039      	breq __delay_ms1
                 __delay_ms0:
                +
000333 ef8a     +LDI R24 , LOW ( 0xFA )
000334 e090     +LDI R25 , HIGH ( 0xFA )
                +__DELAY_USW_LOOP :
000335 9701     +SBIW R24 , 1
000336 f7f1     +BRNE __DELAY_USW_LOOP
                 	__DELAY_USW 0xFA
000337 95a8      	wdr
000338 9711      	sbiw r26,1
000339 f7c9      	brne __delay_ms0
                 __delay_ms1:
00033a 9508      	ret
                 
                 __LSLW2:
00033b 0fee      	LSL  R30
00033c 1fff      	ROL  R31
00033d 0fee      	LSL  R30
00033e 1fff      	ROL  R31
00033f 9508      	RET
                 
                 __EEPROMRDW:
000340 9611      	ADIW R26,1
000341 d002      	RCALL __EEPROMRDB
000342 2ffe      	MOV  R31,R30
000343 9711      	SBIW R26,1
                 
                 __EEPROMRDB:
000344 99e1      	SBIC EECR,EEWE
000345 cffe      	RJMP __EEPROMRDB
000346 93ff      	PUSH R31
000347 b7ff      	IN   R31,SREG
000348 94f8      	CLI
000349 bbae      	OUT  EEARL,R26
00034a bbbf      	OUT  EEARH,R27
00034b 9ae0      	SBI  EECR,EERE
00034c b3ed      	IN   R30,EEDR
00034d bfff      	OUT  SREG,R31
00034e 91ff      	POP  R31
00034f 9508      	RET
                 
                 __EEPROMWRW:
000350 d007      	RCALL __EEPROMWRB
000351 9611      	ADIW R26,1
000352 93ef      	PUSH R30
000353 2fef      	MOV  R30,R31
000354 d003      	RCALL __EEPROMWRB
000355 91ef      	POP  R30
000356 9711      	SBIW R26,1
000357 9508      	RET
                 
                 __EEPROMWRB:
000358 9be1      	SBIS EECR,EEWE
000359 c002      	RJMP __EEPROMWRB1
00035a 95a8      	WDR
00035b cffc      	RJMP __EEPROMWRB
                 __EEPROMWRB1:
00035c b79f      	IN   R25,SREG
00035d 94f8      	CLI
00035e bbae      	OUT  EEARL,R26
00035f bbbf      	OUT  EEARH,R27
000360 9ae0      	SBI  EECR,EERE
000361 b38d      	IN   R24,EEDR
000362 17e8      	CP   R30,R24
000363 f019      	BREQ __EEPROMWRB0
000364 bbed      	OUT  EEDR,R30
000365 9ae2      	SBI  EECR,EEMWE
000366 9ae1      	SBI  EECR,EEWE
                 __EEPROMWRB0:
000367 bf9f      	OUT  SREG,R25
000368 9508      	RET
                 
                 __SAVELOCR4:
000369 933a      	ST   -Y,R19
                 __SAVELOCR3:
00036a 932a      	ST   -Y,R18
                 __SAVELOCR2:
00036b 931a      	ST   -Y,R17
00036c 930a      	ST   -Y,R16
00036d 9508      	RET
                 
                 __LOADLOCR4:
00036e 813b      	LDD  R19,Y+3
                 __LOADLOCR3:
00036f 812a      	LDD  R18,Y+2
                 __LOADLOCR2:
000370 8119      	LDD  R17,Y+1
000371 8108      	LD   R16,Y
000372 9508      	RET
                 
                 ;END OF CODE MARKER
                 __END_OF_CODE:


RESOURCE USE INFORMATION
------------------------

Notice:
The register and instruction counts are symbol table hit counts,
and hence implicitly used resources are not counted, eg, the
'lpm' instruction without operands implicitly uses r0 and z,
none of which are counted.

x,y,z are separate entities in the symbol table and are
counted separately from r26..r31 here.

.dseg memory usage only counts static data declared with .byte

ATmega32 register use summary:
r0 :   8 r1 :   3 r2 :   0 r3 :   0 r4 :  15 r5 :   8 r6 :   2 r7 :   2 
r8 :   2 r9 :   2 r10:   2 r11:   2 r12:   2 r13:   2 r14:   0 r15:   2 
r16:   9 r17:  13 r18:   2 r19:   5 r20:   0 r21:   0 r22:   4 r23:   2 
r24:  25 r25:   7 r26:  88 r27:  44 r28:   5 r29:   1 r30: 159 r31:  70 
x  :   3 y  :  60 z  :  17 
Registers used: 30 out of 35 (85.7%)

ATmega32 instruction use summary:
.lds  :   0 .lds.l:   0 .sts  :   0 .sts.l:   0 adc   :   6 add   :   7 
adiw  :   8 and   :   0 andi  :   3 asr   :   0 bclr  :   0 bld   :   0 
brbc  :   0 brbs  :   0 brcc  :   0 brcs  :   0 break :   0 breq  :  18 
brge  :   0 brhc  :   0 brhs  :   0 brid  :   0 brie  :   0 brlo  :   2 
brlt  :   0 brmi  :   0 brne  :  26 brpl  :   0 brsh  :   0 brtc  :   0 
brts  :   0 brvc  :   0 brvs  :   0 bset  :   0 bst   :   0 call  :  77 
cbi   :   6 cbr   :   1 clc   :   0 clh   :   0 cli   :   3 cln   :   0 
clr   :   6 cls   :   0 clt   :   0 clv   :   0 clz   :   0 com   :   0 
cp    :  14 cpc   :  13 cpi   :   8 cpse  :   0 dec   :   7 des   :   0 
eor   :   0 fmul  :   0 fmuls :   0 fmulsu:   0 icall :   0 ijmp  :   0 
in    :  11 inc   :   0 jmp   :  24 ld    :  25 ldd   :   8 ldi   : 164 
lds   :   4 lpm   :  25 lsl   :   2 lsr   :   0 mov   :  12 movw  :  10 
mul   :   0 muls  :   0 mulsu :   0 neg   :   0 nop   :   0 or    :   1 
ori   :   2 out   :  30 pop   :   2 push  :   2 rcall :  26 ret   :  23 
reti  :   1 rjmp  :  40 rol   :   2 ror   :   0 sbc   :   0 sbci  :   2 
sbi   :  10 sbic  :   3 sbis  :   5 sbiw  :   9 sbr   :   0 sbrc  :   0 
sbrs  :   0 sec   :   0 seh   :   0 sei   :   2 sen   :   0 ser   :   0 
ses   :   0 set   :   0 sev   :   0 sez   :   0 sleep :   1 spm   :   0 
st    :  29 std   :   2 sts   :   9 sub   :   0 subi  :   7 swap  :   1 
tst   :   0 wdr   :   2 
Instructions used: 49 out of 116 (42.2%)

ATmega32 memory use summary [bytes]:
Segment   Begin    End      Code   Data   Used    Size   Use%
---------------------------------------------------------------
[.cseg] 0x000000 0x0006e6   1612    154   1766   32768   5.4%
[.dseg] 0x000060 0x000267      0      7      7    2048   0.3%
[.eseg] 0x000000 0x00000a      0     10     10    1024   1.0%

Assembly complete, 0 errors, 11 warnings
